set nocompatible              " be iMproved, required
filetype off                  " required

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-fugitive'
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-endwise'
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'unblevable/quick-scope'
Plug 'pearofducks/ansible-vim'
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'wellle/targets.vim'
Plug 'derekwyatt/vim-scala'
Plug 'bronson/vim-trailing-whitespace'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tomasr/molokai'
Plug 'whatyouhide/vim-gotham'
Plug 'edkolev/tmuxline.vim'
Plug 'kassio/neoterm'
Plug 'chriskempson/base16-vim'
Plug 'BufOnly.vim'
Plug 'justinmk/vim-sneak'
Plug 'fatih/vim-go'
Plug 'zchee/deoplete-go'
Plug 'neomake/neomake'
function! DoRemote(arg)
  UpdateRemotePlugins
endfunction
Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') }

call plug#end()

filetype plugin on
syntax on
set background=dark
set t_Co=256
colo CandyPaper
" Disable mouse click position change
set mouse-=a
" Clear background color from loaded theme
highlight Normal ctermbg=NONE
highlight nonText ctermbg=NONE

filetype plugin indent on
set tabstop=2 shiftwidth=2 softtabstop=2 expandtab
set relativenumber
set number
set updatetime=250
let mapleader = "\<Space>"

" Speed up redraw
set ttyfast
set lazyredraw

" deoplete
let g:deoplete#enable_at_startup = 1

" neomake
" autocmd! BufWritePost * Neomake!
let g:neomake_open_list = 2

" nvimux
let g:nvimux_prefix='<C-a>'

" Vim temp files outside of working directories
set dir=~/.tmp/swap/
set backup
set backupdir=~/.tmp/backup/
set undofile
set undodir=~/.tmp/undo/

" Remember last position
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

if has('nvim')
    nmap <silent><BS> :<C-u>TmuxNavigateLeft<CR>
else
    nmap <C-h> <C-w>h
endif

" Enable Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='luna'
let g:airline_powerline_fonts = 1

" Quickscope
" let g:qs_enable = 1
" let g:qs_enable_char_list = [ 'f', 'F', 't', 'T' ]
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
" function! Quick_scope_selective(movement)
"     let needs_disabling = 0
"     if !g:qs_enable
"         QuickScopeToggle
"         redraw
"         let needs_disabling = 1
"     endif
"     let letter = nr2char(getchar())
"     if needs_disabling
"         QuickScopeToggle
"     endif
"     return a:movement . letter
" endfunction

" for i in g:qs_enable_char_list
"   execute 'noremap <expr> <silent>' . i . " Quick_scope_selective('". i . "')"
" endfor

imap jj <Esc>

" FZF
" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})
nnoremap <silent> <C-p> :Files<cr>
nnoremap <leader>/ :Ag<space>
nnoremap <silent> <leader>f :Files<cr>
nnoremap <silent> <leader>gdo :Files ~/workspace/devops<cr>
nnoremap <silent> <leader>gml :Files ~/workspace/mavenlink<cr>
nnoremap <silent> <leader>b :Buffers<cr>
nnoremap <silent> <leader>dab :1,$bd<cr>
nnoremap <silent> <leader>dob :BufOnly<cr>
nnoremap <silent> <leader>gs :Gstatus<cr>
nnoremap <silent> <leader>gr :GoRun<cr>
nnoremap <silent> <leader>gb :GoBuild<cr>
nnoremap <silent> <leader>ws :FixWhitespace<cr>
nnoremap <silent> <leader>vim :e ~/.vimrc<cr>
nnoremap <silent> <leader>db :!terminal docker-compose build && docker-compose down && docker-compose up<cr>

" Toggle between normal and relative numbering.
nnoremap <leader>ln :set rnu!<cr>
